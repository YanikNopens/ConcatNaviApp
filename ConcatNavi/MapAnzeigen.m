//
//  MapAnzeigen.m
//  ConcatNavi
//
//  Created by Benutzer on 30.04.20.
//  Copyright Â© 2020 Benutzer. All rights reserved.
//

#import "MapAnzeigen.h"

@interface MapAnzeigen () <MRCampaignManagerDelegate>

@property (nonatomic, copy) MREditorKey *appKey;
@property (nonatomic, strong) MRCampaignManager *campaignManager;
@property (nonatomic) BOOL shouldBeMonitoring;

@end

@implementation MapAnzeigen


// If you look at the Main.storyboard, you will see that I've changed the MapScene to use
// the ViewController class.  Therefore, this init method will be called when the "Map" button
// is pressed on the simulator and the map scene is launched.
- (id)initWithCoder:(NSCoder *)coder {
    if ((self = [super initWithCoder:coder])) {
        // Set the map key for the map view
        self.mapView.mapKey = [MREditorKey keyForMap:@"4850043909308416" app:@"6269340510584832"];
        }
    return self;
}







- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    self.displaysSearchSheet = YES;
    
    
}


/*#pragma mark - MRCampaignManagerDelegate

- (BOOL)campaignManager:(MRCampaignManager *)manager shouldGenerateNotificationForCampaign:(NSDictionary *)campaignInfo {

    NSLog(@"About to trigger campaign with title '%@'", campaignInfo[@"title"]);

    // We could return NO or create our own UIAlert or NSNotification based on the contents of campaignInfo if we wished.
    // Returning YES will cause the default behavior, typically a local notification.

    // Since we don't want to pollute our app delegate with logic to generate an alert if we're foregrounded, we'll handle
    // that case here.
    if ([UIApplication sharedApplication].applicationState == UIApplicationStateActive) {

        UIAlertController *alertController =
        [UIAlertController alertControllerWithTitle:@"Campaign Triggered"
                                            message:campaignInfo[@"message"]
                                     preferredStyle:UIAlertControllerStyleAlert];
        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
        [self presentViewController:alertController animated:YES completion:nil];

        // we handled it so MRCampaignManager doesn't have to.
        return NO;
    }
    else {
        // allow MRCampaignManager to handle it the usual way (posting a local notification)
        return YES;
    }
}

- (void)applicationWillEnterForeground {
    // clear out any notifications generated by MRCampaignManager
    [[UNUserNotificationCenter currentNotificationCenter] removeAllPendingNotificationRequests];
}

- (void)campaignManager:(MRCampaignManager *)manager didFailWithError:(NSError *)error {

    NSLog(@"Campaign manager failed with error: %@", error);

    UIAlertController *alertController =
    [UIAlertController alertControllerWithTitle:@"Campaign Error"
                                        message:error.localizedDescription
                                 preferredStyle:UIAlertControllerStyleAlert];
    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
    [self presentViewController:alertController animated:YES completion:nil];
}
*/



@end
